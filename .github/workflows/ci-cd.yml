name: Fraud Detection CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      s3_bucket_name1:
        description: 'S3 Bucket for ML model and training data'
        required: true
        default: 'fraudassessmentssensemodel'
        type: string
      s3_bucket_name2:
        description: 'S3 Bucket for processed transactions'
        required: true
        default: 'fraudassessmentssenseresult'
        type: string
      dynamodb_table_name:
        description: 'DynamoDB table name'
        required: true
        default: 'ssense-fraud-transactions'
        type: string
      kinesis_stream_name:
        description: 'Kinesis Stream name'
        required: true
        default: 'ssense-transaction-stream'
        type: string
      sns_email_address:
        description: 'Email for fraud alerts'
        required: true
        default: 'sparshgoyal023@gmail.com'
        type: string

env:
  AWS_REGION: us-west-2
  LAMBDA_CODE_BUCKET: ${{ secrets.AWS_ACCOUNT_ID }}-lambda-code
  NOTEBOOK_CODE_BUCKET: ${{ secrets.AWS_ACCOUNT_ID }}-notebook-code
  DEFAULT_S3_BUCKET_NAME1: 'fraudassessmentssensemodel'
  DEFAULT_S3_BUCKET_NAME2: 'fraudassessmentssenseresult'
  DEFAULT_DYNAMODB_TABLE_NAME: 'ssense-fraud-transactions'
  DEFAULT_KINESIS_STREAM_NAME: 'ssense-transaction-stream'
  DEFAULT_SNS_EMAIL_ADDRESS: 'sparshgoyal023@gmail.com'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 lambda-package/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 lambda-package/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Validate CloudFormation template
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - run: |
          aws cloudformation validate-template --template-body file://cf.template

  copy-files-to-s3:
    needs: validate
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Create S3 buckets if they don't exist
        run: |
          # Create Lambda code bucket if it doesn't exist
          if ! aws s3 ls "s3://${LAMBDA_CODE_BUCKET}" 2>&1 > /dev/null; then
            aws s3 mb "s3://${LAMBDA_CODE_BUCKET}" --region ${AWS_REGION}
            aws s3api put-bucket-encryption --bucket ${LAMBDA_CODE_BUCKET} --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
          fi
          
          # Create Notebook code bucket if it doesn't exist
          if ! aws s3 ls "s3://${NOTEBOOK_CODE_BUCKET}" 2>&1 > /dev/null; then
            aws s3 mb "s3://${NOTEBOOK_CODE_BUCKET}" --region ${AWS_REGION}
            aws s3api put-bucket-encryption --bucket ${NOTEBOOK_CODE_BUCKET} --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
          fi
      
      - name: Zip Lambda package
        run: |
          cd lambda-package/source/lambda/model-invocation
          zip -r ../../../../fraud_detection.zip index.py
          cd ../../../../
      
      - name: Copy files directly to S3
        run: |
          # Copy Lambda code to S3
          aws s3 cp fraud_detection.zip s3://${LAMBDA_CODE_BUCKET}/fraud-detection/lambda/fraud_detection.zip
          
          # Copy Notebook files to S3
          aws s3 cp notebook-package/source/notebooks/sagemaker_fraud_detection.ipynb s3://${NOTEBOOK_CODE_BUCKET}/fraud-detection/notebooks/sagemaker_fraud_detection.ipynb
          aws s3 cp notebook-package/source/notebooks/src/package/config.py s3://${NOTEBOOK_CODE_BUCKET}/fraud-detection/notebooks/config.py
          aws s3 cp notebook-package/source/notebooks/fraud_detection_processor.py s3://${NOTEBOOK_CODE_BUCKET}/fraud-detection/notebooks/fraud_detection_processor.py
          aws s3 cp notebook-package/source/notebooks/sagemaker_fraud_detection.py s3://${NOTEBOOK_CODE_BUCKET}/fraud-detection/notebooks/sagemaker_fraud_detection.py
          aws s3 cp notebook-package/source/notebooks/src/package/generator.py s3://${NOTEBOOK_CODE_BUCKET}/fraud-detection/notebooks/generator.py
          aws s3 cp notebook-package/source/notebooks/src/package/utils.py s3://${NOTEBOOK_CODE_BUCKET}/fraud-detection/notebooks/utils.py
          aws s3 cp notebook-package/on-start.sh s3://${NOTEBOOK_CODE_BUCKET}/fraud-detection/notebooks/on-start.sh
          
          
          if [ -f "notebook-package/requirements.txt" ]; then
            aws s3 cp notebook-package/requirements.txt s3://${NOTEBOOK_CODE_BUCKET}/fraud-detection/notebooks/requirements.txt
          fi

  
  deploy-cloudformation:
    needs: copy-files-to-s3
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file cf.template \
            --stack-name fraudssenseassessment \
            --parameter-overrides \
              S3BucketName1=${{ github.event.inputs.s3_bucket_name1 || env.DEFAULT_S3_BUCKET_NAME1 }} \
              S3BucketName2=${{ github.event.inputs.s3_bucket_name2 || env.DEFAULT_S3_BUCKET_NAME2 }} \
              DynamoDBTableName=${{ github.event.inputs.dynamodb_table_name || env.DEFAULT_DYNAMODB_TABLE_NAME }} \
              KinesisStreamName=${{ github.event.inputs.kinesis_stream_name || env.DEFAULT_KINESIS_STREAM_NAME }} \
              NotebookCodeS3Bucket=${NOTEBOOK_CODE_BUCKET} \
              LambdaCodeS3Bucket=${LAMBDA_CODE_BUCKET} \
              ModelDataBucketName=${{ github.event.inputs.s3_bucket_name1 || env.DEFAULT_S3_BUCKET_NAME1 }} \
              DataPrefix=historical-data \
              NumTransactions=50000 \
              FraudRatio=0.1 \
              SNSEmailAddress=${{ github.event.inputs.sns_email_address || env.DEFAULT_SNS_EMAIL_ADDRESS }} \
            --capabilities CAPABILITY_IAM \
            --no-fail-on-empty-changeset
      
      - name: Get CloudFormation outputs
        id: cfn-outputs
        run: |
          outputs=$(aws cloudformation describe-stacks --stack-name fraudssenseassessment --query 'Stacks[0].Outputs' --output json)
          echo "cfn_outputs=$(echo $outputs | jq -c)" >> $GITHUB_OUTPUT
          echo "Deployed stack with outputs: $outputs"


  # deploy-cloudformation-cf2:
  #   needs: deploy-cloudformation
  #   runs-on: ubuntu-latest
  #   environment: production
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}
      
  #     - name: Deploy CloudFormation cf2 stack
  #       run: |
  #         aws cloudformation deploy \
  #           --template-file cf2.template \
  #           --stack-name fraudssenseassessment-datagenerator \
  #           --parameter-overrides \
  #             ModelDataBucketName=${{ github.event.inputs.s3_bucket_name1 || env.DEFAULT_S3_BUCKET_NAME1 }} \
  #             DataPrefix=historical-data \
  #             NumTransactions=50000 \
  #             FraudRatio=0.1 \
  #           --capabilities CAPABILITY_IAM \
  #           --no-fail-on-empty-changeset


  invoke-data-generator-lambda:
    needs: deploy-cloudformation
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Lambda function name from CloudFormation outputs
        id: get-lambda-name
        run: |
          LAMBDA_NAME=ssense-fraud-data-generator
          echo "LAMBDA_NAME=$LAMBDA_NAME" >> $GITHUB_ENV
          echo "Lambda function to invoke: $LAMBDA_NAME"

      - name: Invoke the Lambda function
        run: |
          aws lambda invoke \
            --function-name "$LAMBDA_NAME" \
            --invocation-type Event \
            --payload '{}' \
            response.json
          echo "Lambda function $LAMBDA_NAME triggered successfully."
